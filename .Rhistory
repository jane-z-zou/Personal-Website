labs(title = "Road Safety Statistics (2017-2022)",
x = "Year",
y = "Count",
color = "Category") +
theme_minimal() +
theme(legend.position = "right") +
scale_color_manual(values = c("Fatal Crashes" = "red",
"Fatal and Serious Injury Crashes" = "brown",
"Car Fatalities" = "blue",
"Car Fatalities and Serious Injuries" = "gold",
"Pedestrian Fatalities" = "orange",
"Pedestrian Fatalities and Serious Injuries" = "lightgreen",
"Bicyclist Fatalities" = "pink",
"Bicyclist Fatalities and Serious Injuries" = "purple"))
rm(list = ls())
# Load necessary libraries
library(tidyverse)
# Corrected data frame creation
data <- data.frame(
Year = rep(2017:2022, each =  8),  # Corrected the number of repetitions
Category = rep(c("Fatal Crashes", "Fatal and Serious Injury Crashes", "Car Fatalities",
"Car Fatalities and Serious Injuries", "Pedestrian Fatalities",
"Pedestrian Fatalities and Serious Injuries", "Bicyclist Fatalities",
"Bicyclist Fatalities and Serious Injuries"), 6),  # Corrected the number of repetitions
Count = c(715,  3851,  758,  4287,  271,  1060,  38,  279,
693,  4070,  741,  4496,  260,  1091,  41,  316,
683,  4148,  724,  4582,  287,  1184,  42,  290,
729,  3867,  769,  4348,  272,  1015,  29,  236,
798,  4718,  840,  5244,  305,  1237,  29,  269,
811,  4575,  861,  5113,  311,  1197,  35,  324)
)
# Assuming 'data' is your prepared data frame
ggplot(data, aes(x = Year, y = Count, group = Category, color = Category)) +
geom_line(size = 2) +
geom_point(size = 3) +
scale_y_log10() +
labs(title = "Road Safety Statistics (2017-2022)",
x = "Year",
y = "Count",
color = "Category") +
theme_minimal() +
theme(legend.position = "bottom") +
scale_color_manual(values = c("Fatal Crashes" = "red",
"Fatal and Serious Injury Crashes" = "brown",
"Car Fatalities" = "blue",
"Car Fatalities and Serious Injuries" = "gold",
"Pedestrian Fatalities" = "orange",
"Pedestrian Fatalities and Serious Injuries" = "lightgreen",
"Bicyclist Fatalities" = "pink",
"Bicyclist Fatalities and Serious Injuries" = "purple"))
rm(list = ls())
# Load necessary libraries
library(tidyverse)
# Corrected data frame creation
data <- data.frame(
Year = rep(2017:2022, each =  8),  # Corrected the number of repetitions
Category = rep(c("Fatal Crashes", "Fatal and Serious Injury Crashes", "Car Fatalities",
"Car Fatalities and Serious Injuries", "Pedestrian Fatalities",
"Pedestrian Fatalities and Serious Injuries", "Bicyclist Fatalities",
"Bicyclist Fatalities and Serious Injuries"), 6),  # Corrected the number of repetitions
Count = c(715,  3851,  758,  4287,  271,  1060,  38,  279,
693,  4070,  741,  4496,  260,  1091,  41,  316,
683,  4148,  724,  4582,  287,  1184,  42,  290,
729,  3867,  769,  4348,  272,  1015,  29,  236,
798,  4718,  840,  5244,  305,  1237,  29,  269,
811,  4575,  861,  5113,  311,  1197,  35,  324)
)
# Assuming 'data' is your prepared data frame
ggplot(data, aes(x = Year, y = Count, group = Category, color = Category)) +
geom_line(size = 2) +
geom_point(size = 3) +
scale_y_log10() +
labs(title = "Road Safety Statistics (2017-2022)",
x = "Year",
y = "Count",
color = "Category") +
theme_minimal() +
theme(legend.position = "right") +
scale_color_manual(values = c("Fatal Crashes" = "red",
"Fatal and Serious Injury Crashes" = "brown",
"Car Fatalities" = "blue",
"Car Fatalities and Serious Injuries" = "gold",
"Pedestrian Fatalities" = "orange",
"Pedestrian Fatalities and Serious Injuries" = "lightgreen",
"Bicyclist Fatalities" = "pink",
"Bicyclist Fatalities and Serious Injuries" = "purple"))
rm(list = ls())
rm(list = ls())
library(tidyverse)
setwd("/Users/lianzou/Downloads/Glaucoma Research Volunteer/Judy - VA Log Mar")
df <- read_csv("Main(Jf05152024- 5yr_5FU.csv) (1) copy (1) (1) (1).csv")
df
df %>% group_by(PATIENT_ID, EYE)
df %>% group_by(PATIENT_ID, EYE) %>% select(logMAR)
df %>% group_by(PATIENT_ID, EYE) %>% select(`Baseline/Final`, logMAR)
df %>% group_by(PATIENT_ID, EYE) %>% select(`Baseline/Final`, logMAR) %>% filter(!is.na(`Baseline/Final`))
df %>% group_by(PATIENT_ID, EYE) %>% select(`Baseline/Final`, logMAR) %>% filter(!is.na(`Baseline/Final`)) %>% summarise(mean(logMAR))
df %>% group_by(PATIENT_ID, EYE) %>% select(`Baseline/Final`, logMAR) %>% filter(!is.na(`Baseline/Final`))
%>% group_by(PATIENT_ID, EYE, `Baseline/Final`)
%>% group_by(PATIENT_ID, EYE, `Baseline/Final`)
df %>% group_by(PATIENT_ID, EYE) %>% select(`Baseline/Final`, logMAR) %>% filter(!is.na(`Baseline/Final`)) %>% group_by(PATIENT_ID, EYE, `Baseline/Final`)
df %>% group_by(PATIENT_ID, EYE) %>% select(`Baseline/Final`, logMAR) %>% filter(!is.na(`Baseline/Final`)) %>% group_by(PATIENT_ID, EYE, `Baseline/Final`) %>% summarize(mean(logMAR))
df %>% group_by(PATIENT_ID, EYE) %>% select(`Baseline/Final`, logMAR) %>% filter(!is.na(`Baseline/Final`)) %>% group_by(PATIENT_ID, EYE, `Baseline/Final`) %>% summarize(logMAR_avg = mean(logMAR)) %>% summarize
df %>% group_by(PATIENT_ID, EYE) %>% select(`Baseline/Final`, logMAR) %>% filter(!is.na(`Baseline/Final`)) %>% group_by(PATIENT_ID, EYE, `Baseline/Final`) %>% summarize(logMAR_avg = mean(logMAR))
df %>% group_by(PATIENT_ID, EYE) %>% select(`Baseline/Final`, logMAR) %>% filter(!is.na(`Baseline/Final`)) %>% group_by(PATIENT_ID, EYE, `Baseline/Final`) %>% summarize(logMAR_avg = mean(logMAR))
df <- df %>% group_by(PATIENT_ID, EYE) %>% select(`Baseline/Final`, logMAR) %>% filter(!is.na(`Baseline/Final`)) %>% group_by(PATIENT_ID, EYE, `Baseline/Final`) %>% summarize(logMAR_avg = mean(logMAR))
df
df %>% group_by(PATIENT_ID, EYE)
df %>% group_by(PATIENT_ID, EYE) %>% count(logMAR_avg)
df %>% group_by(PATIENT_ID, EYE) %>% n()
df %>% group_by(PATIENT_ID, EYE) %>% count()
df %>% group_by(PATIENT_ID, EYE) %>% count() %>% filter(n != 2)
df %>% group_by(PATIENT_ID, EYE) %>% count() %>% filter(n == 2)
df %>% group_by(PATIENT_ID, EYE) %>% count()
df %>% group_by(PATIENT_ID, EYE)
df %>% group_by(PATIENT_ID, EYE) %>% pivot_wider(names_from = `Baseline/Final`, values_from = logMAR_avg, names_prefix = "logMAR_")
df %>% group_by(PATIENT_ID, EYE) %>% pivot_wider(names_from = `Baseline/Final`, values_from = logMAR_avg, names_prefix = "logMAR_") %>%
rename(Baseline = logMAR_1, Final = logMAR_2)
df %>% group_by(PATIENT_ID, EYE) %>% pivot_wider(names_from = `Baseline/Final`, values_from = logMAR_avg, names_prefix = "logMAR_") %>%
rename("Baseline_logMAR" = logMAR_1, "Final_logMAR" = logMAR_2)
df %>% group_by(PATIENT_ID, EYE) %>% pivot_wider(names_from = `Baseline/Final`, values_from = logMAR_avg, names_prefix = "logMAR_") %>%
rename("Baseline_logMAR" = logMAR_1, "Final_logMAR" = logMAR_2) %>% summarize(Baseline_logMAR / Final_logMAR)
df %>% group_by(PATIENT_ID, EYE) %>% pivot_wider(names_from = `Baseline/Final`, values_from = logMAR_avg, names_prefix = "logMAR_") %>%
rename("Baseline_logMAR" = logMAR_1, "Final_logMAR" = logMAR_2) %>% summarize(logMAR_division = Baseline_logMAR / Final_logMAR)
df %>% group_by(PATIENT_ID, EYE) %>% pivot_wider(names_from = `Baseline/Final`, values_from = logMAR_avg, names_prefix = "logMAR_") %>%
rename("Baseline_logMAR" = logMAR_1, "Final_logMAR" = logMAR_2) %>% mutate(logMAR_division = Baseline_logMAR / Final_logMAR)
df %>% group_by(PATIENT_ID, EYE) %>% pivot_wider(names_from = `Baseline/Final`, values_from = logMAR_avg, names_prefix = "logMAR_") %>%
rename("Baseline_logMAR" = logMAR_1, "Final_logMAR" = logMAR_2) %>% mutate(logMAR_div = Baseline_logMAR / Final_logMAR)
df <- df %>% group_by(PATIENT_ID, EYE) %>% pivot_wider(names_from = `Baseline/Final`, values_from = logMAR_avg, names_prefix = "logMAR_") %>%
rename("Baseline_logMAR" = logMAR_1, "Final_logMAR" = logMAR_2) %>% mutate(logMAR_div = Baseline_logMAR / Final_logMAR)
df
write.csv(df, "0605_MainLogMARDivided.csv")
library(tidyverse)
df <- read_csv("JunkDetector.csv")
tiredcry <- read.delim("tired_features_osm_affect.csv", sep=";", header = TRUE)
tiredcry[, 6376] <- rep("tired", 24)
bellypaincry <- read.delim("belly_pain_features_osm_affect.csv", sep=";", header = TRUE)
bellypaincry[, 6376] <- rep("pain", 17)
hungrycry <- read.delim("hungry_features_osm_affect.csv", sep=";", header = TRUE)
hungrycry[, 6376] <- rep("hungry", 382)
discomfortcry <- read.delim("discomfort_features_osm_affect.csv", sep=";", header = TRUE)
discomfortcry[, 6376] <- rep("discomfort", 27)
burpingcry <- read.delim("burping_features_osm_affect.csv", sep=";", header = TRUE)
burpingcry[, 6376] <- rep("burp", 8)
allcries <- rbind(bellypaincry[-17,], burpingcry, discomfortcry, hungrycry, tiredcry)
colnames(allcries)[6376] <- "class"
df <- df %>% filter("Label" == "Cry") %>% distinct()
df
library(tidyverse)
df <- read_csv("JunkDetector.csv")
tiredcry <- read.delim("tired_features_osm_affect.csv", sep=";", header = TRUE)
tiredcry[, 6376] <- rep("tired", 24)
bellypaincry <- read.delim("belly_pain_features_osm_affect.csv", sep=";", header = TRUE)
bellypaincry[, 6376] <- rep("pain", 17)
hungrycry <- read.delim("hungry_features_osm_affect.csv", sep=";", header = TRUE)
hungrycry[, 6376] <- rep("hungry", 382)
discomfortcry <- read.delim("discomfort_features_osm_affect.csv", sep=";", header = TRUE)
discomfortcry[, 6376] <- rep("discomfort", 27)
burpingcry <- read.delim("burping_features_osm_affect.csv", sep=";", header = TRUE)
burpingcry[, 6376] <- rep("burp", 8)
allcries <- rbind(bellypaincry[-17,], burpingcry, discomfortcry, hungrycry, tiredcry)
colnames(allcries)[6376] <- "class"
df
df %>% filter(Label == "Cry")
df <- df %>% filter(Label == "Cry")
allcries[df$Label=="Cry", ]
nojunkcries <- allcries[df$Label=="Cry", ]
nojunkcries <- nojunkcries %>% select(colnames(nojunkcries)[6376], colnames(nojunkcries)[1:6375])
rownames(nojunkcries) <- NULL
colnames(nojunkcries)[1] <- "class"
library(psych)    # For EFA and parallel analysis
predictors <- nojunkcries[, setdiff(names(nojunkcries), "class")]
efa_result <- fa(r = cor(predictors), nfactors = 2, rotate = "varimax")
nojunkcries
predictors <- nojunkcries[, setdiff(names(nojunkcries), "Label")]
library(tidyverse)
df <- read_csv("JunkDetector.csv")
tiredcry <- read.delim("tired_features_osm_affect.csv", sep=";", header = TRUE)
tiredcry[, 6376] <- rep("tired", 24)
bellypaincry <- read.delim("belly_pain_features_osm_affect.csv", sep=";", header = TRUE)
bellypaincry[, 6376] <- rep("pain", 17)
hungrycry <- read.delim("hungry_features_osm_affect.csv", sep=";", header = TRUE)
hungrycry[, 6376] <- rep("hungry", 382)
discomfortcry <- read.delim("discomfort_features_osm_affect.csv", sep=";", header = TRUE)
discomfortcry[, 6376] <- rep("discomfort", 27)
burpingcry <- read.delim("burping_features_osm_affect.csv", sep=";", header = TRUE)
burpingcry[, 6376] <- rep("burp", 8)
allcries <- rbind(bellypaincry[-17,], burpingcry, discomfortcry, hungrycry, tiredcry)
colnames(allcries)[6376] <- "Label"
df <- df %>% filter(Label == "Cry")
nojunkcries <- allcries[df$Label=="Cry", ]
nojunkcries <- nojunkcries %>% select(colnames(nojunkcries)[6376], colnames(nojunkcries)[1:6375])
rownames(nojunkcries) <- NULL
colnames(nojunkcries)[1] <- "class"
library(psych)    # For EFA and parallel analysis
predictors <- nojunkcries[, setdiff(names(nojunkcries), "Label")]
efa_result <- fa(r = cor(predictors), nfactors = 2, rotate = "varimax")
write.csv(nojunkcries, "New_Collated_Data.csv")
library(tidyverse)
df <- read_csv("New_Collated_Data.csv")
table(df$class)
usethis::edit_r_environ()
`usethis::edit_r_environ() `
`usethis::edit_r_environ()`
usethis::edit_r_environ()
install.packages("usethis")
usethis::edit_r_environ()
usethis::edit_r_environ()
system("/Users/lianzou/.Renviron")
path.expand("~")
setwd("/Users/lianzou/Downloads/Work")
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(lubridate)
# Load the dataset
sales_data <- read.csv("sales_data.csv")
# Check the first few rows of the dataset
head(sales_data)
# Check the structure of the dataset
str(sales_data)
# Summary statistics
summary(sales_data)
# Convert date column to Date type if needed
sales_data$date <- as.Date(sales_data$date, format="%Y-%m-%d")
# Check the structure of the dataset
str(sales_data)
# Summary statistics
summary(sales_data)
sales_data
sales_data$Date <- parse_date_time(sales_data$Date, "ymd")
sales_data
monthly_sales <- sales_data %>%
group_by(month = floor_date(date, "month")) %>%
summarize(total_sales = sum(sales_amount))
sales_data %>%
mutate(year = year(Date),
month = month(date, label = TRUE, abbr = TRUE))
sales_data %>%
mutate(year = year(Date),
month = month(Date, label = TRUE, abbr = TRUE))
sales_data <- sales_data %>%
mutate(year = year(Date),
month = month(Date, label = TRUE, abbr = TRUE))
monthly_sales <- sales_data %>%
group_by(year, month) %>%
summarize(total_sales = sum(sales_amount), .groups = 'drop')
monthly_sales <- sales_data %>%
group_by(year, month) %>%
summarize(total_sales = sum(Units * Unit.price), .groups = 'drop')
monthly_sales
monthly_sales <- monthly_sales %>%
mutate(year_month = as.Date(paste(year, month, "01", sep = "-"), format = "%Y-%b-%d"))
monthly_sales
ggplot(monthly_sales, aes(x = year_month, y = total_sales)) +
geom_line(color = "blue") +
geom_point() +
labs(title = "Monthly Sales Trends",
x = "Month",
y = "Total Sales ($)") +
theme_minimal()
ggplot(monthly_sales, aes(x = year_month, y = total_sales)) +
geom_line(color = "steelblue", size = 1) +  # Line color and size
geom_point(color = "darkblue", size = 2) +  # Points color and size
labs(title = "Monthly Sales Trends",
x = "Month",
y = "Total Sales ($)",
caption = "Data source: sales_data.csv") +  # Title, x-axis, y-axis labels, and caption
scale_x_date(date_labels = "%b %Y", date_breaks = "6 months") +  # Formatting x-axis
theme_minimal() +  # Clean theme
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10),
plot.caption = element_text(size = 8, face = "italic"),
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_line(color = "grey90")
)
# Plotting
ggplot(monthly_sales, aes(x = year_month, y = total_sales)) +
geom_line(color = "steelblue", size = 1) +  # Line color and size
geom_point(color = "darkblue", size = 2) +  # Points color and size
labs(title = "Monthly Sales Trends",
x = "Month",
y = "Total Sales ($)",
caption = "Data source: sales_data.csv") +  # Title, x-axis, y-axis labels, and caption
scale_x_date(date_labels = "%b %Y", date_breaks = "6 months") +  # Formatting x-axis
theme_minimal() +  # Clean theme
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10, angle = 45, hjust = 1),  # Rotate x-axis labels
plot.caption = element_text(size = 8, face = "italic"),
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_line(color = "grey90")
)
# Plotting
ggplot(monthly_sales, aes(x = year_month, y = total_sales)) +
geom_line(color = "steelblue", size = 1) +  # Line color and size
geom_point(color = "darkblue", size = 2) +  # Points color and size
labs(title = "Monthly Sales Trends",
x = "Month",
y = "Total Sales ($)",
caption = "Data source: sales_data.csv") +  # Title, x-axis, y-axis labels, and caption
scale_x_date(date_labels = "%b %Y", date_breaks = "6 months") +  # Formatting x-axis
theme_minimal() +  # Clean theme
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10, angle = 30, hjust = 1),  # Rotate x-axis labels
plot.caption = element_text(size = 8, face = "italic"),
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_line(color = "grey90")
)
# Plotting
ggplot(monthly_sales, aes(x = year_month, y = total_sales)) +
geom_line(color = "steelblue", size = 1) +  # Line color and size
geom_point(color = "darkblue", size = 2) +  # Points color and size
labs(title = "Monthly Sales Trends",
x = "Month",
y = "Total Sales ($)",
caption = "Data source: sales_data.csv") +  # Title, x-axis, y-axis labels, and caption
scale_x_date(date_labels = "%b %Y", date_breaks = "6 months") +  # Formatting x-axis
theme_minimal() +  # Clean theme
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10, angle = 15, hjust = 1),  # Rotate x-axis labels
plot.caption = element_text(size = 8, face = "italic"),
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_line(color = "grey90")
)
# Plotting
ggplot(monthly_sales, aes(x = year_month, y = total_sales)) +
geom_line(color = "steelblue", size = 1) +  # Line color and size
geom_point(color = "darkblue", size = 2) +  # Points color and size
labs(title = "Monthly Sales Trends",
x = "Month",
y = "Total Sales ($)",
caption = "Data source: sales_data.csv") +  # Title, x-axis, y-axis labels, and caption
scale_x_date(date_labels = "%b %Y", date_breaks = "6 months") +  # Formatting x-axis
theme_minimal() +  # Clean theme
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10, angle = 30, hjust = 1),  # Rotate x-axis labels
plot.caption = element_text(size = 8, face = "italic"),
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_line(color = "grey90")
)
# Plotting
ggplot(monthly_sales, aes(x = year_month, y = total_sales)) +
geom_line(color = "steelblue", size = 1) +  # Line color and size
geom_point(color = "darkblue", size = 2) +  # Points color and size
labs(title = "Monthly Sales Trends",
x = "Month",
y = "Total Sales ($)",
caption = "Data source: sales_data.csv") +  # Title, x-axis, y-axis labels, and caption
scale_x_date(date_labels = "%b %Y", date_breaks = "4 months") +  # Formatting x-axis
theme_minimal() +  # Clean theme
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10, angle = 30, hjust = 1),  # Rotate x-axis labels
plot.caption = element_text(size = 8, face = "italic"),
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_line(color = "grey90")
)
# Plotting
ggplot(monthly_sales, aes(x = year_month, y = total_sales)) +
geom_line(color = "steelblue", size = 1) +  # Line color and size
geom_point(color = "darkblue", size = 2) +  # Points color and size
labs(title = "Monthly Sales Trends",
x = "Month",
y = "Total Sales ($)",
caption = "Data source: sales_data.csv") +  # Title, x-axis, y-axis labels, and caption
scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") +  # Formatting x-axis
theme_minimal() +  # Clean theme
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10, angle = 30, hjust = 1),  # Rotate x-axis labels
plot.caption = element_text(size = 8, face = "italic"),
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_line(color = "grey90")
)
# Plotting
ggplot(monthly_sales, aes(x = year_month, y = total_sales)) +
geom_line(color = "steelblue", size = 1) +  # Line color and size
geom_point(color = "darkblue", size = 2) +  # Points color and size
labs(title = "Monthly Sales Trends",
x = "Month",
y = "Total Sales ($)",
caption = "Data source: sales_data.csv") +  # Title, x-axis, y-axis labels, and caption
scale_x_date(date_labels = "%b %Y", date_breaks = "1 months") +  # Formatting x-axis
theme_minimal() +  # Clean theme
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10, angle = 30, hjust = 1),  # Rotate x-axis labels
plot.caption = element_text(size = 8, face = "italic"),
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_line(color = "grey90")
)
# Plotting
ggplot(monthly_sales, aes(x = year_month, y = total_sales)) +
geom_line(color = "steelblue", size = 1) +  # Line color and size
geom_point(color = "darkblue", size = 2) +  # Points color and size
labs(title = "Monthly Sales Trends",
x = "Month",
y = "Total Sales ($)",
caption = "Data source: sales_data.csv") +  # Title, x-axis, y-axis labels, and caption
scale_x_date(date_labels = "%b %Y", date_breaks = "4 months") +  # Formatting x-axis
theme_minimal() +  # Clean theme
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10, angle = 30, hjust = 1),  # Rotate x-axis labels
plot.caption = element_text(size = 8, face = "italic"),
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_line(color = "grey90")
)
ggplot(monthly_sales, aes(x = year_month, y = total_sales)) +
geom_line(color = "steelblue", size = 1) +  # Line color and size
geom_point(color = "darkblue", size = 2) +  # Points color and size
labs(title = "Monthly Sales Trends",
x = "Month",
y = "Total Sales ($)",
caption = "Data source: sales_data.csv") +  # Title, x-axis, y-axis labels, and caption
scale_x_date(date_labels = "%Y-%m", date_breaks = "6 months") +  # Formatting x-axis with year-month
theme_minimal() +  # Clean theme
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10, angle = 45, hjust = 1),  # Rotate x-axis labels
plot.caption = element_text(size = 8, face = "italic"),
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_line(color = "grey90")
)
ggplot(monthly_sales, aes(x = year_month, y = total_sales)) +
geom_line(color = "steelblue", size = 1) +  # Line color and size
geom_point(color = "darkblue", size = 2) +  # Points color and size
labs(title = "Monthly Sales Trends",
x = "Month",
y = "Total Sales ($)",
caption = "Data source: sales_data.csv") +  # Title, x-axis, y-axis labels, and caption
scale_x_date(date_labels = "%m-%Y", date_breaks = "6 months") +  # Formatting x-axis with year-month
theme_minimal() +  # Clean theme
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10, angle = 45, hjust = 1),  # Rotate x-axis labels
plot.caption = element_text(size = 8, face = "italic"),
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_line(color = "grey90")
)
ggplot(monthly_sales, aes(x = year_month, y = total_sales)) +
geom_line(color = "steelblue", size = 1) +  # Line color and size
geom_point(color = "darkblue", size = 2) +  # Points color and size
labs(title = "Monthly Sales Trends",
x = "Month",
y = "Total Sales ($)",
caption = "Data source: sales_data.csv") +  # Title, x-axis, y-axis labels, and caption
scale_x_date(date_labels = "%m-%Y", date_breaks = "6 months") +  # Formatting x-axis with year-month
theme_minimal() +  # Clean theme
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10, angle = 30, hjust = 1),  # Rotate x-axis labels
plot.caption = element_text(size = 8, face = "italic"),
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_line(color = "grey90")
)
ggplot(monthly_sales, aes(x = year_month, y = total_sales)) +
geom_line(color = "steelblue", size = 1) +  # Line color and size
geom_point(color = "darkblue", size = 2) +  # Points color and size
labs(title = "Monthly Sales Trends",
x = "Month",
y = "Total Sales ($)",
caption = "Data source: sales_data.csv") +  # Title, x-axis, y-axis labels, and caption
scale_x_date(date_labels = "%m-%Y", date_breaks = "6 months") +  # Formatting x-axis with year-month
theme_minimal() +  # Clean theme
theme(
plot.title = element_text(size = 14, face = "bold"),
axis.title = element_text(size = 12, face = "bold"),
axis.text = element_text(size = 10, angle = 20, hjust = 1),  # Rotate x-axis labels
plot.caption = element_text(size = 8, face = "italic"),
panel.grid.major = element_line(color = "grey80"),
panel.grid.minor = element_line(color = "grey90")
)
setwd("~/Downloads/Work/Alto")
library(tidyverse)
checkout <- read_csv("checkoutattempts.csv")
order <- read_csv("orderstatus.csv")
checkout
checkout %>% filter(order_id != NA)
checkout %>% filter(!is.na(order_id))
checkout %>% filter(!is.na(order_id), customer_added_non_med_to_order == TRUE)
added <- checkout %>% filter(!is.na(order_id), customer_added_non_med_to_order == TRUE)
not_added <- checkout %>% filter(!is.na(order_id), customer_added_non_med_to_order == FALSE)
added <- checkout %>% filter(!is.na(order_id), customer_added_non_med_to_order == TRUE)
not_added <- checkout %>% filter(!is.na(order_id), customer_added_non_med_to_order == FALSE)
added
order
added
order
merge(checkout, order, by = c("order_id", "customer_id"))
df <- merge(checkout, order, by = c("order_id", "customer_id")) %>% distinct()
391/11992
setwd("/Users/lianzou/Downloads/Work/website")
git add .
setwd("~/Downloads/Work/website")
