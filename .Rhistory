Page = sort(unique(df_answers$item_id)),
Character_Count = c(74, 57, 89, 122, 52, 1, 38),
)
try <- data.frame(
Page = sort(unique(df_answers$item_id)),
Character_Count == c(74, 57, 89, 122, 52, 1, 38),
)
library(ggplot2)
try <- data.frame(
Page = sort(unique(df_answers$item_id)),
Character_Count = c(74, 57, 89, 122, 52, 1, 38),
EOC = rep(0.7, 7),  # Example EOC scores
Bubble_Size = c(74, 57, 89, 122, 52, 1, 38)  # Example bubble sizes
)
# Now you have a data frame that you can use to create a bubble plot with ggplot2
library(ggplot2)
ggplot(try, aes(x = Character_Count, y = EOC, size = Bubble_Size, color = Page)) +
geom_point(alpha = 0.7) +
scale_size_continuous(range = c(3, 20)) +  # Adjust the range based on your actual bubble size data
theme_minimal() +
labs(
title = "Bubble Plot of EOC Scores by Character Count and Page",
x = "Character Count",
y = "EOC",
size = "Bubble Size",
color = "Page"
) +
theme(legend.position = "right")
library(ggplot2)
try <- data.frame(
Page = sort(unique(df_answers$item_id)),
Character_Count = c(74, 57, 89, 122, 52, 1, 38),
EOC = rep(0.7, 7),  # Example EOC scores
Bubble_Size = c(74, 57, 89, 122, 52, 1, 38)  # Example bubble sizes
)
ggplot(try, aes(x = Page, y = Character_Count, fill = Page)) +
geom_col(show.legend = FALSE) +  # Use geom_col to create bars with pre-computed values
theme_minimal() +
labs(
title = "Bar Chart of Character Counts by Page",
x = "Page",
y = "Character Count"
) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
ggplot(try, aes(x = Page, y = Character_Count, fill = Page)) +
geom_col(show.legend = FALSE) + coord_flip() # Use geom_col to create bars with pre-computed values
theme_minimal() +
labs(
title = "Bar Chart of Character Counts by Page",
x = "Page",
y = "Character Count"
) + theme_minimal()
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
theme_minimal() +
labs(
title = "Bar Chart of Character Counts by Page",
x = "Page",
y = "Character Count"
) + theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
theme_minimal() +
labs(
title = "Bar Chart of Character Counts by Page",
x = "Page",
y = "Character Count"
) + theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability
ggplot(try, aes(x = Page, y = Character_Count, fill = Page)) +
geom_col(show.legend = FALSE) +  # Use geom_col to create bars with pre-computed values
coord_flip() +  # Flip the coordinates to make the bars horizontal
theme_minimal() +
labs(
title = "Bar Chart of Character Counts by Page",
y = "Page",  # Swapped x and y labels because of coord_flip
x = "Character Count"
) +
theme(axis.text.y = element_text(angle = 0, hjust = 1))  # Adjust text angle and justification if needed
ggplot(try, aes(x = Page, y = Character_Count, fill = Page)) +
geom_col(show.legend = FALSE) +  # Use geom_col to create bars with pre-computed values
coord_flip() +
scale_fill_brewer(palette = "Pastel1") +# Flip the coordinates to make the bars horizontal
theme_minimal() +
labs(
title = "Bar Chart of Character Counts by Page",
y = "Page",  # Swapped x and y labels because of coord_flip
x = "Character Count"
) +
theme(axis.text.y = element_text(angle = 0, hjust = 1))  # Adjust text angle and justification if needed
ggplot(try, aes(x = Page, y = Character_Count, fill = Page)) +
geom_col(show.legend = FALSE) +  # Use geom_col to create bars with pre-computed values
coord_flip() +
scale_fill_brewer(palette = "Pastel1") +# Flip the coordinates to make the bars horizontal
theme_minimal() +
labs(
title = "Bar Chart of Character Counts by Page",
y = "Page",  # Swapped x and y labels because of coord_flip
x = "Character Count"
) +
theme(axis.text.y = element_text(angle = 0, hjust = 1))  # Adjust text angle and justification if needed
ggplot(try, aes(x = Page, y = Character_Count, fill = Page)) +
geom_col(show.legend = FALSE) +  # Use geom_col to create bars with pre-computed values
coord_flip() +
scale_fill_brewer(palette = "Pastel1") +# Flip the coordinates to make the bars horizontal
theme_minimal() +
labs(
title = "Bar Chart of Character Counts by Page",
y = "Page",  # Swapped x and y labels because of coord_flip
x = "Character Count"
) +
theme(axis.text.y = element_text(angle = 0, hjust = 1), aspect.ratio = 0.2)  # Adjust text angle and justification if needed
ggplot(try, aes(x = Page, y = Character_Count, fill = Page)) +
geom_col(show.legend = FALSE) +  # Use geom_col to create bars with pre-computed values
coord_flip() +
scale_fill_brewer(palette = "Pastel1") +# Flip the coordinates to make the bars horizontal
theme_minimal() +
labs(
title = "Bar Chart of Character Counts by Page",
y = "Page",  # Swapped x and y labels because of coord_flip
x = "Character Count"
) +
theme(axis.text.y = element_text(angle = 0, hjust = 1), aspect.ratio = 5)  # Adjust text angle and justification if needed
ggplot(try, aes(x = Page, y = Character_Count, fill = Page)) +
geom_col(show.legend = FALSE) +  # Use geom_col to create bars with pre-computed values
coord_flip() +
scale_fill_brewer(palette = "Pastel1") +# Flip the coordinates to make the bars horizontal
theme_minimal() +
labs(
title = "Bar Chart of Character Counts by Page",
y = "Page",  # Swapped x and y labels because of coord_flip
x = "Character Count"
) +
theme(axis.text.y = element_text(angle = 0, hjust = 1), aspect.ratio = 4)  # Adjust text angle and justification if needed
ggplot(try, aes(x = Page, y = Character_Count, fill = Page)) +
geom_col(show.legend = FALSE) +  # Use geom_col to create bars with pre-computed values
coord_flip() +
scale_fill_brewer(palette = "Pastel1") +# Flip the coordinates to make the bars horizontal
theme_minimal() +
labs(
title = "Bar Chart of Character Counts by Page",
y = "Page",  # Swapped x and y labels because of coord_flip
x = "Character Count"
) +
theme(axis.text.y = element_text(angle = 0, hjust = 1), aspect.ratio = 2)  # Adjust text angle and justification if needed
ggplot(try, aes(x = Page, y = Character_Count, fill = Page)) +
geom_col(show.legend = FALSE) +  # Use geom_col to create bars with pre-computed values
coord_flip() +
geom_text(aes(label = Character_Count), hjust = -0.1, size = 3.5) +  # Add text annotations
scale_fill_brewer(palette = "Pastel1") +# Flip the coordinates to make the bars horizontal
theme_minimal() +
labs(
title = "Bar Chart of Character Counts by Page",
y = "Page",  # Swapped x and y labels because of coord_flip
x = "Character Count"
) +
theme(axis.text.y = element_text(angle = 0, hjust = 1), aspect.ratio = 2)  # Adjust text angle and justification if needed
library(ggplot2)
try <- data.frame(
Page = sort(unique(df_answers$item_id)),
Character_Count = c(74, 57, 89, 122, 52, 1, 38),
EOC = rep(0.7, 7),  # Example EOC scores
Bubble_Size = c(74, 57, 89, 122, 52, 1, 38)  # Example bubble sizes
)
ggplot(try, aes(x = Page, y = Character_Count, fill = Page)) +
geom_col(show.legend = FALSE) +  # Use geom_col to create bars with pre-computed values
coord_flip() +
geom_text(aes(label = Character_Count), hjust = -0.1, size = 3.5) +  # Add text annotations
scale_fill_brewer(palette = "Pastel1") +# Flip the coordinates to make the bars horizontal
theme_minimal() +
labs(
title = "Bar Chart of Character Counts by Page",
y = "Page",  # Swapped x and y labels because of coord_flip
x = "Character Count"
) +
theme(axis.text.y = element_text(angle = 0, hjust = 1), aspect.ratio = 2)  # Adjust text angle and justification if needed
ggplot(try, aes(x = Page, y = Character_Count, fill = Page)) +
geom_col(show.legend = FALSE) +  # Use geom_col to create bars with pre-computed values
coord_flip() +
geom_text(aes(label = Character_Count), hjust = 0.1, size = 3.5) +  # Add text annotations
scale_fill_brewer(palette = "Pastel1") +# Flip the coordinates to make the bars horizontal
theme_minimal() +
labs(
title = "Bar Chart of Character Counts by Page",
y = "Page",  # Swapped x and y labels because of coord_flip
x = "Character Count"
) +
theme(axis.text.y = element_text(angle = 0, hjust = 1), aspect.ratio = 2)  # Adjust text angle and justification if needed
ggplot(try, aes(x = Page, y = Character_Count, fill = Page)) +
geom_col(show.legend = FALSE) +  # Use geom_col to create bars with pre-computed values
coord_flip() +
geom_text(aes(label = Character_Count), hjust = 0.5, size = 3.5) +  # Add text annotations
scale_fill_brewer(palette = "Pastel1") +# Flip the coordinates to make the bars horizontal
theme_minimal() +
labs(
title = "Bar Chart of Character Counts by Page",
y = "Page",  # Swapped x and y labels because of coord_flip
x = "Character Count"
) +
theme(axis.text.y = element_text(angle = 0, hjust = 1), aspect.ratio = 2)  # Adjust text angle and justification if needed
ggplot(try, aes(x = Page, y = Character_Count, fill = Page)) +
geom_col(show.legend = FALSE) +  # Use geom_col to create bars with pre-computed values
coord_flip() +
geom_text(aes(label = Character_Count), hjust = 1, size = 3.5) +  # Add text annotations
scale_fill_brewer(palette = "Pastel1") +# Flip the coordinates to make the bars horizontal
theme_minimal() +
labs(
title = "Bar Chart of Character Counts by Page",
y = "Page",  # Swapped x and y labels because of coord_flip
x = "Character Count"
) +
theme(axis.text.y = element_text(angle = 0, hjust = 1), aspect.ratio = 2)  # Adjust text angle and justification if needed
try <- data.frame(
Page = c("Ch 4.1", "Ch 4.2", "Ch 4.3", "Ch 4.4", "Ch 4.9", "Ch 5.1", "Ch 5.3"),
Character_Count = c(74, 57, 89, 122, 52, 1, 38),
EOC = rep(0.7, 7),  # Example EOC scores
Bubble_Size = c(74, 57, 89, 122, 52, 1, 38)  # Example bubble sizes
)
ggplot(try, aes(x = Page, y = Character_Count, fill = Page)) +
geom_col(show.legend = FALSE) +  # Use geom_col to create bars with pre-computed values
coord_flip() +
geom_text(aes(label = Character_Count), hjust = 1, size = 3.5) +  # Add text annotations
scale_fill_brewer(palette = "Pastel1") +# Flip the coordinates to make the bars horizontal
theme_minimal() +
labs(
title = "Bar Chart of Character Counts by Page",
y = "Page",  # Swapped x and y labels because of coord_flip
x = "Character Count"
) +
theme(axis.text.y = element_text(angle = 0, hjust = 1), aspect.ratio = 2)  # Adjust text angle and justification if needed
library(tidyverse)
df <- read_csv("data.csv")
df_answers <- df %>%
filter(!str_detect(answer, "\\[")) %>%
mutate(
word_count = nchar(answer),
item_id = as.factor(item_id)  # Assuming item_id needs to be a factor; add this column if not already present
) %>%
group_by(prompt) %>%
filter(word_count < quantile(word_count, 0.5)) %>%
distinct() %>%
select(answer, n_correct, n_possible, EOC, word_count, item_id)  # Ensure all relevant columns are selected
# Fitting the model with interaction between item_id and word_count
m8 <- lm(EOC ~ item_id * word_count, data = df_answers)
library(dplyr)
library(tidyr)
library(ggplot2)
# Assuming df_answers and model m8 are already correctly set up:
# Generate a new data frame for predictions
word_count_range <- seq(min(df_answers$word_count), max(df_answers$word_count), by = 1)
predictions <- expand.grid(item_id = unique(df_answers$item_id), word_count = word_count_range)
# Predict EOC using the model for each combination of item_id and word_count
predictions$EOC_pred <- predict(m8, newdata = predictions)
# Finding the optimal word count for each item_id
optimal_word_counts <- predictions %>%
group_by(item_id) %>%
arrange(desc(EOC_pred)) %>%
filter(EOC_pred == max(EOC_pred) & word_count != max(word_count)) %>%
slice(1) %>%
ungroup()
predictions %>% group_by(item_id) %>% arrange(desc(EOC_pred)) %>% filter(EOC_pred >= 0.8) %>% distinct()
# View the optimal word counts
print(optimal_word_counts)
# Optional: Plot the results to visualize
intersection_points <- predictions %>%
group_by(item_id) %>%
mutate(difference = abs(EOC_pred - 0.7)) %>%
filter(difference == min(difference)) %>%
slice(1) %>%
ungroup()
# Now create the plot with these intersection points highlighted
ggplot(predictions, aes(x = word_count, y = EOC_pred, color = item_id)) +
geom_line(size = 2) +  # Adding lines for each item_id
geom_point(data = intersection_points, aes(x = word_count, y = EOC_pred, fill = item_id), size = 5, shape = 21) +
geom_text(data = intersection_points, aes(x = word_count, y = EOC_pred, label = word_count), vjust = -1, hjust = -0.1, color = "black", size = 3.5) +  # Adding text labels for word counts
scale_color_brewer(palette = "Pastel1") +  # Changing the outline color to pastel
scale_fill_brewer(palette = "Pastel1") +  # Ensuring the fill uses the same pastel palette
labs(
title = "Character Count for EOC = 0.70 by Page",
x = "Character Count",
y = "EOC",
color = "Page",
fill = "Page"  # Adding label for fill legend if needed
) +
theme_minimal() +
theme(legend.position = "right")
library(ggplot2)
try <- data.frame(
Page = c("Ch 4.1", "Ch 4.2", "Ch 4.3", "Ch 4.4", "Ch 4.9", "Ch 5.1", "Ch 5.3"),
Character_Count = c(74, 57, 89, 122, 52, 1, 38),
EOC = rep(0.7, 7),  # Example EOC scores
Bubble_Size = c(74, 57, 89, 122, 52, 1, 38)  # Example bubble sizes
)
ggplot(try, aes(x = Page, y = Character_Count, fill = Page)) +
geom_col(show.legend = FALSE) +  # Use geom_col to create bars with pre-computed values
coord_flip() +
geom_text(aes(label = Character_Count), hjust = 1, size = 3.5) +  # Add text annotations
scale_fill_brewer(palette = "Pastel1") +# Flip the coordinates to make the bars horizontal
theme_minimal() +
labs(
title = "Bar Chart of Character Counts by Page",
y = "Page",  # Swapped x and y labels because of coord_flip
x = "Character Count"
) +
theme(axis.text.y = element_text(angle = 0, hjust = 1), aspect.ratio = 2)  # Adjust text angle and justification if needed
library(caret)
library(ggplot2)
set.seed(32)
train_control <- trainControl(
method = "cv",   # k-fold cross-validation
number = 10      # number of folds
)
cv_to_do <- cv_to_do %>% group_by(item_id) %>% mutate(low = summary(n_correct / n_possible)[2], high = summary(n_correct / n_possible)[5])
cv_to_do <- df %>% select(page, tried_again_clicks, item_id, n_possible, n_correct, n_attempt, EOC)
cv_to_do <- cv_to_do %>% arrange(desc(EOC)) %>% group_by(item_id)
library(caret)
library(ggplot2)
set.seed(32)
train_control <- trainControl(
method = "cv",   # k-fold cross-validation
number = 10      # number of folds
)
cv_to_do <- cv_to_do %>% group_by(item_id) %>% mutate(low = summary(n_correct / n_possible)[2], high = summary(n_correct / n_possible)[5])
cv_to_do <- cv_to_do %>% group_by(item_id) %>% mutate(difficulty = n_correct/n_possible) %>% mutate(level = ifelse(difficulty < low, "Difficult",
ifelse(difficulty > high, "Easy", "Medium")))
fit_eoc <- function(df) {
model <- train(EOC ~ tried_again_clicks, data = df, method = "lm", trControl = train_control)
return(model$results$RMSE)  # Return RMSE to assess model error
}
cv_to_do
results <- cv_to_do %>%
group_by(tried_again_clicks, level) %>%
summarise(Average_EOC = mean(EOC), .groups = 'drop')
cv_results <- expand.grid(tried_again_clicks = unique(cv_to_do$tried_again_clicks),
level = unique(cv_to_do$level)) %>%
group_by(tried_again_clicks, level) %>%
summarise(CV_RMSE = fit_eoc(filter(cv_to_do, tried_again_clicks == tried_again_clicks & level == level)), .groups = 'drop')
results <- left_join(results, cv_results, by = c("tried_again_clicks", "level"))
colors <- c("Difficult" = "#fbb4ae",  # Pastel red
"Medium" = "#b3cde3",  # Pastel blue
"Easy" = "#ccebc5")
ggplot(results, aes(x = tried_again_clicks, y = Average_EOC, color = level)) +
geom_line(aes(group = level)) +  # Connect lines across tried_again_clicks for each level
geom_point(size = 4) +  # Draw points
scale_color_manual(values = colors) +  # Apply custom colors
scale_x_continuous(breaks = 0:max(results$tried_again_clicks, na.rm = TRUE)) +  # Ensure x-axis has breaks from 0 to max clicks
labs(
title = "Impact of 'Tried Again' Clicks and Difficulty Level on EOC Performance",
x = "Number of 'Tried Again' Clicks",
y = "Average EOC",
color = "Difficulty Level"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 0, hjust = 1),  # Tilt x-axis labels for better readability
plot.title = element_text(hjust = 0.5),  # Center-align the title
plot.subtitle = element_text(hjust = 0.5)
)
ggsave("extended_plot.png", width = 5, height = 10, dpi = 300)
ggsave("extended_plot.png", width = 7, height = 10, dpi = 300)
ggsave("extended_plot.png", width = 8, height = 10, dpi = 300)
ggplot(results, aes(x = tried_again_clicks, y = Average_EOC, color = level)) +
geom_line(aes(group = level)) +  # Connect lines across tried_again_clicks for each level
geom_point(size = 4) +  # Draw points
scale_color_manual(values = colors) +  # Apply custom colors
scale_x_continuous(breaks = 0:max(results$tried_again_clicks, na.rm = TRUE)) +  # Ensure x-axis has breaks from 0 to max clicks
labs(
title = "Impact of 'Tried Again' Clicks and Difficulty Level on EOC Performance",
x = "Number of 'Tried Again' Clicks",
y = "Average EOC",
color = "Difficulty Level"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 0, hjust = 1),  # Tilt x-axis labels for better readability
plot.title = element_text(hjust = 0.5),  # Center-align the title
plot.subtitle = element_text(hjust = 0.5)
)
ggplot(results, aes(x = tried_again_clicks, y = Average_EOC, color = level)) +
geom_line(aes(group = level)) +  # Connect lines across tried_again_clicks for each level
geom_point(size = 4) +  # Draw points
scale_color_manual(values = colors) +  # Apply custom colors
scale_x_continuous(breaks = 0:max(results$tried_again_clicks, na.rm = TRUE)) +  # Ensure x-axis has breaks from 0 to max clicks
labs(
title = "Impact of 'Tried Again' Clicks and Difficulty Level on EOC Performance",
x = "Number of 'Tried Again' Clicks",
y = "Average EOC",
color = "Difficulty Level"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 0, hjust = 1),  # Tilt x-axis labels for better readability
plot.title = element_text(hjust = 0.5),  # Center-align the title
plot.subtitle = element_text(hjust = 0.5)
)
ggplot(results, aes(x = tried_again_clicks, y = Average_EOC, color = level)) +
geom_line(aes(group = level), size = 2) +  # Connect lines across tried_again_clicks for each level
geom_point(size = 5) +  # Draw points
scale_color_manual(values = colors) +  # Apply custom colors
scale_x_continuous(breaks = 0:max(results$tried_again_clicks, na.rm = TRUE)) +  # Ensure x-axis has breaks from 0 to max clicks
labs(
title = "Impact of 'Tried Again' Clicks and Difficulty Level on EOC Performance",
x = "Number of 'Tried Again' Clicks",
y = "Average EOC",
color = "Difficulty Level"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 0, hjust = 1),  # Tilt x-axis labels for better readability
plot.title = element_text(hjust = 0.5),  # Center-align the title
plot.subtitle = element_text(hjust = 0.5)
)
ggsave("extended_plot.png", width = 8, height = 10, dpi = 300)
ggplot(results, aes(x = tried_again_clicks, y = Average_EOC, color = level)) +
geom_line(aes(group = level), size = 2) +  # Connect lines across tried_again_clicks for each level
geom_point(size = 5) +  # Draw points
scale_color_manual(values = colors) +  # Apply custom colors
scale_x_continuous(breaks = 0:max(results$tried_again_clicks, na.rm = TRUE)) +  # Ensure x-axis has breaks from 0 to max clicks
labs(
title = "Impact of 'Tried Again' Clicks and Difficulty Level on EOC Performance",
x = "Number of 'Tried Again' Clicks",
y = "Average EOC",
color = "Difficulty Level"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 0, hjust = 1, size = 5),  # Tilt x-axis labels for better readability
plot.title = element_text(hjust = 0.5),  # Center-align the title
plot.subtitle = element_text(hjust = 0.5)
)
library(tidyverse)
df <- read_csv("data.csv")
cv_to_do <- df %>% select(page, tried_again_clicks, item_id, n_possible, n_correct, n_attempt, EOC)
cv_to_do <- cv_to_do %>% arrange(desc(EOC)) %>% group_by(item_id)
library(caret)
library(ggplot2)
set.seed(32)
train_control <- trainControl(
method = "cv",   # k-fold cross-validation
number = 10      # number of folds
)
cv_to_do <- cv_to_do %>% group_by(item_id) %>% mutate(low = summary(n_correct / n_possible)[2], high = summary(n_correct / n_possible)[5])
cv_to_do <- cv_to_do %>% group_by(item_id) %>% mutate(difficulty = n_correct/n_possible) %>% mutate(level = ifelse(difficulty < low, "Difficult",
ifelse(difficulty > high, "Easy", "Medium")))
fit_eoc <- function(df) {
model <- train(EOC ~ tried_again_clicks, data = df, method = "lm", trControl = train_control)
return(model$results$RMSE)  # Return RMSE to assess model error
}
cv_to_do
results <- cv_to_do %>%
group_by(tried_again_clicks, level) %>%
summarise(Average_EOC = mean(EOC), .groups = 'drop')
cv_results <- expand.grid(tried_again_clicks = unique(cv_to_do$tried_again_clicks),
level = unique(cv_to_do$level)) %>%
group_by(tried_again_clicks, level) %>%
summarise(CV_RMSE = fit_eoc(filter(cv_to_do, tried_again_clicks == tried_again_clicks & level == level)), .groups = 'drop')
results <- left_join(results, cv_results, by = c("tried_again_clicks", "level"))
colors <- c("Difficult" = "#fbb4ae",  # Pastel red
"Medium" = "#b3cde3",  # Pastel blue
"Easy" = "#ccebc5")
ggplot(results, aes(x = tried_again_clicks, y = Average_EOC, color = level)) +
geom_line(aes(group = level), size = 2) +  # Connect lines across tried_again_clicks for each level
geom_point(size = 5) +  # Draw points
scale_color_manual(values = colors) +  # Apply custom colors
scale_x_continuous(breaks = 0:max(results$tried_again_clicks, na.rm = TRUE)) +  # Ensure x-axis has breaks from 0 to max clicks
labs(
title = "Impact of 'Tried Again' Clicks and Difficulty Level on EOC Performance",
x = "Number of 'Tried Again' Clicks",
y = "Average EOC",
color = "Difficulty Level"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 0, hjust = 1, size = 5),  # Tilt x-axis labels for better readability
plot.title = element_text(hjust = 0.5),  # Center-align the title
plot.subtitle = element_text(hjust = 0.5)
)
ggsave("extended_plot.png", width = 8, height = 10, dpi = 300)
ggplot(results, aes(x = tried_again_clicks, y = Average_EOC, color = level)) +
geom_line(aes(group = level), size = 2) +  # Connect lines across tried_again_clicks for each level
geom_point(size = 5) +  # Draw points
scale_color_manual(values = colors) +  # Apply custom colors
scale_x_continuous(breaks = 0:max(results$tried_again_clicks, na.rm = TRUE)) +  # Ensure x-axis has breaks from 0 to max clicks
labs(
title = "Impact of 'Tried Again' Clicks and Difficulty Level on EOC Performance",
x = "Number of 'Tried Again' Clicks",
y = "Average EOC",
color = "Difficulty Level"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 0, hjust = 1, size = 10),  # Tilt x-axis labels for better readability
plot.title = element_text(hjust = 0.5),  # Center-align the title
plot.subtitle = element_text(hjust = 0.5)
)
ggplot(results, aes(x = tried_again_clicks, y = Average_EOC, color = level)) +
geom_line(aes(group = level), size = 2) +  # Connect lines across tried_again_clicks for each level
geom_point(size = 5) +  # Draw points
scale_color_manual(values = colors) +  # Apply custom colors
scale_x_continuous(breaks = 0:max(results$tried_again_clicks, na.rm = TRUE)) +  # Ensure x-axis has breaks from 0 to max clicks
labs(
title = "Impact of 'Tried Again' Clicks and Difficulty Level on EOC Performance",
x = "Number of 'Tried Again' Clicks",
y = "Average EOC",
color = "Difficulty Level"
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 0, hjust = 1, size = 15),  # Tilt x-axis labels for better readability
plot.title = element_text(hjust = 0.5),  # Center-align the title
plot.subtitle = element_text(hjust = 0.5)
)
ggsave("extended_plot.png", width = 8, height = 10, dpi = 300)
rm(list = ls())
