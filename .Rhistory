x = "Year",
y = "Emissions (MT CO2e)",
color = "Subsector") +
theme_minimal() # Use a minimal theme for aesthetics
# Create the plot
ggplot(emissions_data, aes(x = Year, y = Emissions, color = Subsector)) +
geom_line(size = 2) + # Draw lines
geom_point(size = 3) + # Add points
scale_y_continuous(labels = scales::comma) + # Format y-axis labels with commas
labs(title = "Transportation Emissions by Subsector (MT CO₂e)",
x = "Year",
y = "Emissions (MT CO2e)",
color = "Subsector") +
theme_minimal() # Use a minimal theme for aesthetics
library(scales)
# Create the plot
ggplot(emissions_data, aes(x = Year, y = Emissions, color = Subsector)) +
geom_line(size = 2) + # Draw thicker lines
geom_point(size = 3) + # Larger points for visibility
scale_y_log10(labels = comma) + # Use log scale for y-axis and format labels with commas
labs(title = "Transportation Emissions by Subsector (MT CO₂e)",
x = "Year",
y = "Emissions (MT CO₂e)",
color = "Subsector") +
theme_minimal()
# Create the plot
ggplot(emissions_data, aes(x = Year, y = Emissions, color = Subsector)) +
geom_line(size = 2) + # Draw thicker lines
geom_point(size = 3) + # Larger points for visibility
scale_y_log10(labels = comma) + # Use log scale for y-axis and format labels with commas
labs(title = "Transportation Emissions by Subsector (MT CO2e)",
x = "Year",
y = "Emissions (MT CO2e)",
color = "Subsector") +
theme_minimal()
# Load the ggplot2 library
library(ggplot2)
# Create a line plot
ggplot(data = long_prices, aes(x = Year, y = Price, color = Grade)) +
geom_line(size = 2) + # Add lines
geom_point(size = 3) + # Add points
labs(title = "Annual Gasoline Prices in Los Angeles", x = "Year", y = "Price per Gallon (USD)") +
scale_x_continuous(breaks = seq(2018, 2023, by = 1)) + # Customize X-axis
theme_minimal() # Use a minimal theme
# Create a data frame with the gasoline prices
prices <- data.frame(
Year = c(2018, 2019, 2020, 2021, 2022, 2023),
Regular = c(3.51, 3.59, 3.04, 3.99, 5.28, 4.78),
Midgrade = c(3.68, 3.81, 3.30, 4.27, 5.61, 5.12),
Premium = c(3.78, 3.88, 3.34, 4.31, 5.65, 5.17)
)
# Pivot the data to a long format for ggplot
library(tidyr)
long_prices <- pivot_longer(prices, cols = c(Regular, Midgrade, Premium), names_to = "Grade", values_to = "Price")
# Load the ggplot2 library
library(ggplot2)
# Create a line plot
ggplot(data = long_prices, aes(x = Year, y = Price, color = Grade)) +
geom_line(size = 2) + # Add lines
geom_point(size = 3) + # Add points
labs(title = "Annual Gasoline Prices in Los Angeles", x = "Year", y = "Price per Gallon (USD)") +
scale_x_continuous(breaks = seq(2018, 2023, by = 1)) + # Customize X-axis
theme_minimal() # Use a minimal theme
commute_data <- read.csv('california_commute_data.csv')
# Create the plot
ggplot(commute_data, aes(x=Year, y=Percentage, group=Mode, color=Mode)) +
geom_line(size = 2) +
geom_point(size = 3) +
theme_minimal() +
labs(title='Commuting Modes in California from 2015 to 2022',
x='Year',
y='Percentage',
color='Mode') +
theme(legend.position="bottom")
# Create the bar plot using ggplot2
ggplot(path_data, aes(x = path_nums, y = mileages, fill = path_types)) +
geom_bar(stat = "identity", show.legend = TRUE) +
labs(title = "Distribution of Bike Path Types",
x = "Bike Path Type",
y = "Mileage (in miles)") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1)) +
geom_text(aes(label = mileages)) +
guides(fill = guide_legend("Path Types", override.aes = list(fill = "lightgray")))
# Load the ggplot2 package
library(ggplot2)
# Data
commute_modes <- c("Drove Alone", "Carpooled", "Public Transportation", "Walked/Biked/Motorcycle/Taxi")
percentages <- c(78, 10, 6, 6)
# Create a data frame
commute_data <- data.frame(commute_modes, percentages)
# Create the bar plot using ggplot2
ggplot(commute_data, aes(x = commute_modes, y = percentages, fill = commute_modes)) +
geom_bar(stat = "identity", fill = "lightgray") +
labs(title = "Commute Modes in L.A. County (2015)",
x = "Commute Mode",
y = "Percentage") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_text(aes(label = paste0(percentages, "%")))
path_types <- c("Class I (Off Street Bike Path)", "Class II (Unprotected Bike Lanes)",
"Class III (On-Street Bicycle Route)", "Class IV (Separated Bicycle Lanes/Cycle Track)")
path_nums <- c(1:4)
mileages <- c(341, 969, 520, 64)
# Create a data frame
path_data <- data.frame(path_types, path_nums, mileages)
# Create the bar plot using ggplot2
ggplot(path_data, aes(x = path_nums, y = mileages, fill = path_types)) +
geom_bar(stat = "identity", fill = "lightgray", show.legend = TRUE) +
labs(title = "Distribution of Bike Path Types",
x = "Bike Path Type",
y = "Mileage (in miles)") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1)) +
geom_text(aes(label = mileages)) +
guides(fill = guide_legend("Path Types", override.aes = list(fill = "lightgray")))
# Create the bar plot using ggplot2
ggplot(path_data, aes(x = as.factor(path_nums), y = mileages, fill = path_types)) +
geom_bar(stat = "identity") + # Removed the fill parameter, letting ggplot handle coloring
labs(title = "Distribution of Bike Path Types",
x = "Bike Path Type",
y = "Mileage (in miles)") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1)) +
geom_text(aes(label = mileages), vjust = -0.5) + # Adjust text label position
guides(fill = guide_legend("Path Types"))
path_types <- c("Off Street", "Unprotected Bike Lanes",
"On-Street", "Separated Bicycle Lanes/Cycle Track")
path_nums <- c(1:4)
mileages <- c(341, 969, 520, 64)
# Create a data frame
path_data <- data.frame(path_types, path_nums, mileages)
# Create the bar plot using ggplot2
ggplot(path_data, aes(x = as.factor(path_nums), y = mileages, fill = path_types)) +
geom_bar(stat = "identity") + # Removed the fill parameter, letting ggplot handle coloring
labs(title = "Distribution of Bike Path Types",
x = "Bike Path Type",
y = "Mileage (in miles)") +
theme_minimal() +
theme(axis.text.x = element_text(hjust = 1)) +
geom_text(aes(label = mileages), vjust = -0.5) + # Adjust text label position
guides(fill = guide_legend("Path Types"))
# Load necessary libraries
library(tidyverse)
# Corrected data frame creation
data <- data.frame(
Year = rep(2017:2022, each =  8),  # Corrected the number of repetitions
Category = rep(c("Fatal Crashes", "Fatal and Serious Injury Crashes", "Car Fatalities",
"Car Fatalities and Serious Injuries", "Pedestrian Fatalities",
"Pedestrian Fatalities and Serious Injuries", "Bicyclist Fatalities",
"Bicyclist Fatalities and Serious Injuries"), 6),  # Corrected the number of repetitions
Count = c(715,  3851,  758,  4287,  271,  1060,  38,  279,
693,  4070,  741,  4496,  260,  1091,  41,  316,
683,  4148,  724,  4582,  287,  1184,  42,  290,
729,  3867,  769,  4348,  272,  1015,  29,  236,
798,  4718,  840,  5244,  305,  1237,  29,  269,
811,  4575,  861,  5113,  311,  1197,  35,  324)
)
# Assuming 'data' is your prepared data frame
ggplot(data, aes(x = Year, y = Count, group = Category, color = Category)) +
geom_line(size = 2) +
geom_point(size = 3) +
labs(title = "Road Safety Statistics (2017-2022)",
x = "Year",
y = "Count",
color = "Category") +
theme_minimal() +
theme(legend.position = "left") +
scale_color_manual(values = c("Fatal Crashes" = "red",
"Fatal and Serious Injury Crashes" = "brown",
"Car Fatalities" = "blue",
"Car Fatalities and Serious Injuries" = "gold",
"Pedestrian Fatalities" = "orange",
"Pedestrian Fatalities and Serious Injuries" = "lightgreen",
"Bicyclist Fatalities" = "pink",
"Bicyclist Fatalities and Serious Injuries" = "purple"))
rm(list = ls())
library(ggplot2)
library(scales)
commute_data <- read.csv('california_commute_data.csv')
# Create the plot
ggplot(commute_data, aes(x=Year, y=Percentage, group=Mode, color=Mode)) +
geom_line(size = 2) +
geom_point(size = 3) +
scale_y_log10() +
theme_minimal() +
labs(title='Commuting Modes in California from 2015 to 2022',
x='Year',
y='Percentage',
color='Mode') +
theme(legend.position="bottom")
# Assuming 'data' is your prepared data frame
ggplot(data, aes(x = Year, y = Count, group = Category, color = Category)) +
geom_line(size = 2) +
geom_point(size = 3) +
scale_y_log10() +
labs(title = "Road Safety Statistics (2017-2022)",
x = "Year",
y = "Count",
color = "Category") +
theme_minimal() +
theme(legend.position = "left") +
scale_color_manual(values = c("Fatal Crashes" = "red",
"Fatal and Serious Injury Crashes" = "brown",
"Car Fatalities" = "blue",
"Car Fatalities and Serious Injuries" = "gold",
"Pedestrian Fatalities" = "orange",
"Pedestrian Fatalities and Serious Injuries" = "lightgreen",
"Bicyclist Fatalities" = "pink",
"Bicyclist Fatalities and Serious Injuries" = "purple"))
# Assuming 'data' is your prepared data frame
ggplot(data, aes(x = Year, y = Count, group = Category, color = Category)) +
geom_line(size = 2) +
geom_point(size = 3) +
scale_y_log10() +
labs(title = "Road Safety Statistics (2017-2022)",
x = "Year",
y = "Count",
color = "Category") +
theme_minimal() +
theme(legend.position = "left") +
scale_color_manual(values = c("Fatal Crashes" = "red",
"Fatal and Serious Injury Crashes" = "brown",
"Car Fatalities" = "blue",
"Car Fatalities and Serious Injuries" = "gold",
"Pedestrian Fatalities" = "orange",
"Pedestrian Fatalities and Serious Injuries" = "lightgreen",
"Bicyclist Fatalities" = "pink",
"Bicyclist Fatalities and Serious Injuries" = "purple"))
# Load necessary libraries
library(tidyverse)
# Corrected data frame creation
data <- data.frame(
Year = rep(2017:2022, each =  8),  # Corrected the number of repetitions
Category = rep(c("Fatal Crashes", "Fatal and Serious Injury Crashes", "Car Fatalities",
"Car Fatalities and Serious Injuries", "Pedestrian Fatalities",
"Pedestrian Fatalities and Serious Injuries", "Bicyclist Fatalities",
"Bicyclist Fatalities and Serious Injuries"), 6),  # Corrected the number of repetitions
Count = c(715,  3851,  758,  4287,  271,  1060,  38,  279,
693,  4070,  741,  4496,  260,  1091,  41,  316,
683,  4148,  724,  4582,  287,  1184,  42,  290,
729,  3867,  769,  4348,  272,  1015,  29,  236,
798,  4718,  840,  5244,  305,  1237,  29,  269,
811,  4575,  861,  5113,  311,  1197,  35,  324)
)
# Assuming 'data' is your prepared data frame
ggplot(data, aes(x = Year, y = Count, group = Category, color = Category)) +
geom_line(size = 2) +
geom_point(size = 3) +
scale_y_log10() +
labs(title = "Road Safety Statistics (2017-2022)",
x = "Year",
y = "Count",
color = "Category") +
theme_minimal() +
theme(legend.position = "left") +
scale_color_manual(values = c("Fatal Crashes" = "red",
"Fatal and Serious Injury Crashes" = "brown",
"Car Fatalities" = "blue",
"Car Fatalities and Serious Injuries" = "gold",
"Pedestrian Fatalities" = "orange",
"Pedestrian Fatalities and Serious Injuries" = "lightgreen",
"Bicyclist Fatalities" = "pink",
"Bicyclist Fatalities and Serious Injuries" = "purple"))
rm(list = ls())
# Assuming 'data' is your prepared data frame
ggplot(data, aes(x = Year, y = Count, group = Category, color = Category)) +
geom_line(size = 2) +
geom_point(size = 3) +
scale_y_log10() +
labs(title = "Road Safety Statistics (2017-2022)",
x = "Year",
y = "Count",
color = "Category") +
theme_minimal() +
theme(legend.position = "right") +
scale_color_manual(values = c("Fatal Crashes" = "red",
"Fatal and Serious Injury Crashes" = "brown",
"Car Fatalities" = "blue",
"Car Fatalities and Serious Injuries" = "gold",
"Pedestrian Fatalities" = "orange",
"Pedestrian Fatalities and Serious Injuries" = "lightgreen",
"Bicyclist Fatalities" = "pink",
"Bicyclist Fatalities and Serious Injuries" = "purple"))
# Load necessary libraries
library(tidyverse)
# Corrected data frame creation
data <- data.frame(
Year = rep(2017:2022, each =  8),  # Corrected the number of repetitions
Category = rep(c("Fatal Crashes", "Fatal and Serious Injury Crashes", "Car Fatalities",
"Car Fatalities and Serious Injuries", "Pedestrian Fatalities",
"Pedestrian Fatalities and Serious Injuries", "Bicyclist Fatalities",
"Bicyclist Fatalities and Serious Injuries"), 6),  # Corrected the number of repetitions
Count = c(715,  3851,  758,  4287,  271,  1060,  38,  279,
693,  4070,  741,  4496,  260,  1091,  41,  316,
683,  4148,  724,  4582,  287,  1184,  42,  290,
729,  3867,  769,  4348,  272,  1015,  29,  236,
798,  4718,  840,  5244,  305,  1237,  29,  269,
811,  4575,  861,  5113,  311,  1197,  35,  324)
)
# Assuming 'data' is your prepared data frame
ggplot(data, aes(x = Year, y = Count, group = Category, color = Category)) +
geom_line(size = 2) +
geom_point(size = 3) +
scale_y_log10() +
labs(title = "Road Safety Statistics (2017-2022)",
x = "Year",
y = "Count",
color = "Category") +
theme_minimal() +
theme(legend.position = "right") +
scale_color_manual(values = c("Fatal Crashes" = "red",
"Fatal and Serious Injury Crashes" = "brown",
"Car Fatalities" = "blue",
"Car Fatalities and Serious Injuries" = "gold",
"Pedestrian Fatalities" = "orange",
"Pedestrian Fatalities and Serious Injuries" = "lightgreen",
"Bicyclist Fatalities" = "pink",
"Bicyclist Fatalities and Serious Injuries" = "purple"))
rm(list = ls())
# Load necessary libraries
library(tidyverse)
# Corrected data frame creation
data <- data.frame(
Year = rep(2017:2022, each =  8),  # Corrected the number of repetitions
Category = rep(c("Fatal Crashes", "Fatal and Serious Injury Crashes", "Car Fatalities",
"Car Fatalities and Serious Injuries", "Pedestrian Fatalities",
"Pedestrian Fatalities and Serious Injuries", "Bicyclist Fatalities",
"Bicyclist Fatalities and Serious Injuries"), 6),  # Corrected the number of repetitions
Count = c(715,  3851,  758,  4287,  271,  1060,  38,  279,
693,  4070,  741,  4496,  260,  1091,  41,  316,
683,  4148,  724,  4582,  287,  1184,  42,  290,
729,  3867,  769,  4348,  272,  1015,  29,  236,
798,  4718,  840,  5244,  305,  1237,  29,  269,
811,  4575,  861,  5113,  311,  1197,  35,  324)
)
# Assuming 'data' is your prepared data frame
ggplot(data, aes(x = Year, y = Count, group = Category, color = Category)) +
geom_line(size = 2) +
geom_point(size = 3) +
scale_y_log10() +
labs(title = "Road Safety Statistics (2017-2022)",
x = "Year",
y = "Count",
color = "Category") +
theme_minimal() +
theme(legend.position = "bottom") +
scale_color_manual(values = c("Fatal Crashes" = "red",
"Fatal and Serious Injury Crashes" = "brown",
"Car Fatalities" = "blue",
"Car Fatalities and Serious Injuries" = "gold",
"Pedestrian Fatalities" = "orange",
"Pedestrian Fatalities and Serious Injuries" = "lightgreen",
"Bicyclist Fatalities" = "pink",
"Bicyclist Fatalities and Serious Injuries" = "purple"))
rm(list = ls())
# Load necessary libraries
library(tidyverse)
# Corrected data frame creation
data <- data.frame(
Year = rep(2017:2022, each =  8),  # Corrected the number of repetitions
Category = rep(c("Fatal Crashes", "Fatal and Serious Injury Crashes", "Car Fatalities",
"Car Fatalities and Serious Injuries", "Pedestrian Fatalities",
"Pedestrian Fatalities and Serious Injuries", "Bicyclist Fatalities",
"Bicyclist Fatalities and Serious Injuries"), 6),  # Corrected the number of repetitions
Count = c(715,  3851,  758,  4287,  271,  1060,  38,  279,
693,  4070,  741,  4496,  260,  1091,  41,  316,
683,  4148,  724,  4582,  287,  1184,  42,  290,
729,  3867,  769,  4348,  272,  1015,  29,  236,
798,  4718,  840,  5244,  305,  1237,  29,  269,
811,  4575,  861,  5113,  311,  1197,  35,  324)
)
# Assuming 'data' is your prepared data frame
ggplot(data, aes(x = Year, y = Count, group = Category, color = Category)) +
geom_line(size = 2) +
geom_point(size = 3) +
scale_y_log10() +
labs(title = "Road Safety Statistics (2017-2022)",
x = "Year",
y = "Count",
color = "Category") +
theme_minimal() +
theme(legend.position = "right") +
scale_color_manual(values = c("Fatal Crashes" = "red",
"Fatal and Serious Injury Crashes" = "brown",
"Car Fatalities" = "blue",
"Car Fatalities and Serious Injuries" = "gold",
"Pedestrian Fatalities" = "orange",
"Pedestrian Fatalities and Serious Injuries" = "lightgreen",
"Bicyclist Fatalities" = "pink",
"Bicyclist Fatalities and Serious Injuries" = "purple"))
rm(list = ls())
rm(list = ls())
library(tidyverse)
setwd("/Users/lianzou/Downloads/Glaucoma Research Volunteer/Judy - VA Log Mar")
df <- read_csv("Main(Jf05152024- 5yr_5FU.csv) (1) copy (1) (1) (1).csv")
df
df %>% group_by(PATIENT_ID, EYE)
df %>% group_by(PATIENT_ID, EYE) %>% select(logMAR)
df %>% group_by(PATIENT_ID, EYE) %>% select(`Baseline/Final`, logMAR)
df %>% group_by(PATIENT_ID, EYE) %>% select(`Baseline/Final`, logMAR) %>% filter(!is.na(`Baseline/Final`))
df %>% group_by(PATIENT_ID, EYE) %>% select(`Baseline/Final`, logMAR) %>% filter(!is.na(`Baseline/Final`)) %>% summarise(mean(logMAR))
df %>% group_by(PATIENT_ID, EYE) %>% select(`Baseline/Final`, logMAR) %>% filter(!is.na(`Baseline/Final`))
%>% group_by(PATIENT_ID, EYE, `Baseline/Final`)
%>% group_by(PATIENT_ID, EYE, `Baseline/Final`)
df %>% group_by(PATIENT_ID, EYE) %>% select(`Baseline/Final`, logMAR) %>% filter(!is.na(`Baseline/Final`)) %>% group_by(PATIENT_ID, EYE, `Baseline/Final`)
df %>% group_by(PATIENT_ID, EYE) %>% select(`Baseline/Final`, logMAR) %>% filter(!is.na(`Baseline/Final`)) %>% group_by(PATIENT_ID, EYE, `Baseline/Final`) %>% summarize(mean(logMAR))
df %>% group_by(PATIENT_ID, EYE) %>% select(`Baseline/Final`, logMAR) %>% filter(!is.na(`Baseline/Final`)) %>% group_by(PATIENT_ID, EYE, `Baseline/Final`) %>% summarize(logMAR_avg = mean(logMAR)) %>% summarize
df %>% group_by(PATIENT_ID, EYE) %>% select(`Baseline/Final`, logMAR) %>% filter(!is.na(`Baseline/Final`)) %>% group_by(PATIENT_ID, EYE, `Baseline/Final`) %>% summarize(logMAR_avg = mean(logMAR))
df %>% group_by(PATIENT_ID, EYE) %>% select(`Baseline/Final`, logMAR) %>% filter(!is.na(`Baseline/Final`)) %>% group_by(PATIENT_ID, EYE, `Baseline/Final`) %>% summarize(logMAR_avg = mean(logMAR))
df <- df %>% group_by(PATIENT_ID, EYE) %>% select(`Baseline/Final`, logMAR) %>% filter(!is.na(`Baseline/Final`)) %>% group_by(PATIENT_ID, EYE, `Baseline/Final`) %>% summarize(logMAR_avg = mean(logMAR))
df
df %>% group_by(PATIENT_ID, EYE)
df %>% group_by(PATIENT_ID, EYE) %>% count(logMAR_avg)
df %>% group_by(PATIENT_ID, EYE) %>% n()
df %>% group_by(PATIENT_ID, EYE) %>% count()
df %>% group_by(PATIENT_ID, EYE) %>% count() %>% filter(n != 2)
df %>% group_by(PATIENT_ID, EYE) %>% count() %>% filter(n == 2)
df %>% group_by(PATIENT_ID, EYE) %>% count()
df %>% group_by(PATIENT_ID, EYE)
df %>% group_by(PATIENT_ID, EYE) %>% pivot_wider(names_from = `Baseline/Final`, values_from = logMAR_avg, names_prefix = "logMAR_")
df %>% group_by(PATIENT_ID, EYE) %>% pivot_wider(names_from = `Baseline/Final`, values_from = logMAR_avg, names_prefix = "logMAR_") %>%
rename(Baseline = logMAR_1, Final = logMAR_2)
df %>% group_by(PATIENT_ID, EYE) %>% pivot_wider(names_from = `Baseline/Final`, values_from = logMAR_avg, names_prefix = "logMAR_") %>%
rename("Baseline_logMAR" = logMAR_1, "Final_logMAR" = logMAR_2)
df %>% group_by(PATIENT_ID, EYE) %>% pivot_wider(names_from = `Baseline/Final`, values_from = logMAR_avg, names_prefix = "logMAR_") %>%
rename("Baseline_logMAR" = logMAR_1, "Final_logMAR" = logMAR_2) %>% summarize(Baseline_logMAR / Final_logMAR)
df %>% group_by(PATIENT_ID, EYE) %>% pivot_wider(names_from = `Baseline/Final`, values_from = logMAR_avg, names_prefix = "logMAR_") %>%
rename("Baseline_logMAR" = logMAR_1, "Final_logMAR" = logMAR_2) %>% summarize(logMAR_division = Baseline_logMAR / Final_logMAR)
df %>% group_by(PATIENT_ID, EYE) %>% pivot_wider(names_from = `Baseline/Final`, values_from = logMAR_avg, names_prefix = "logMAR_") %>%
rename("Baseline_logMAR" = logMAR_1, "Final_logMAR" = logMAR_2) %>% mutate(logMAR_division = Baseline_logMAR / Final_logMAR)
df %>% group_by(PATIENT_ID, EYE) %>% pivot_wider(names_from = `Baseline/Final`, values_from = logMAR_avg, names_prefix = "logMAR_") %>%
rename("Baseline_logMAR" = logMAR_1, "Final_logMAR" = logMAR_2) %>% mutate(logMAR_div = Baseline_logMAR / Final_logMAR)
df <- df %>% group_by(PATIENT_ID, EYE) %>% pivot_wider(names_from = `Baseline/Final`, values_from = logMAR_avg, names_prefix = "logMAR_") %>%
rename("Baseline_logMAR" = logMAR_1, "Final_logMAR" = logMAR_2) %>% mutate(logMAR_div = Baseline_logMAR / Final_logMAR)
df
write.csv(df, "0605_MainLogMARDivided.csv")
library(tidyverse)
df <- read_csv("JunkDetector.csv")
tiredcry <- read.delim("tired_features_osm_affect.csv", sep=";", header = TRUE)
tiredcry[, 6376] <- rep("tired", 24)
bellypaincry <- read.delim("belly_pain_features_osm_affect.csv", sep=";", header = TRUE)
bellypaincry[, 6376] <- rep("pain", 17)
hungrycry <- read.delim("hungry_features_osm_affect.csv", sep=";", header = TRUE)
hungrycry[, 6376] <- rep("hungry", 382)
discomfortcry <- read.delim("discomfort_features_osm_affect.csv", sep=";", header = TRUE)
discomfortcry[, 6376] <- rep("discomfort", 27)
burpingcry <- read.delim("burping_features_osm_affect.csv", sep=";", header = TRUE)
burpingcry[, 6376] <- rep("burp", 8)
allcries <- rbind(bellypaincry[-17,], burpingcry, discomfortcry, hungrycry, tiredcry)
colnames(allcries)[6376] <- "class"
df <- df %>% filter("Label" == "Cry") %>% distinct()
df
library(tidyverse)
df <- read_csv("JunkDetector.csv")
tiredcry <- read.delim("tired_features_osm_affect.csv", sep=";", header = TRUE)
tiredcry[, 6376] <- rep("tired", 24)
bellypaincry <- read.delim("belly_pain_features_osm_affect.csv", sep=";", header = TRUE)
bellypaincry[, 6376] <- rep("pain", 17)
hungrycry <- read.delim("hungry_features_osm_affect.csv", sep=";", header = TRUE)
hungrycry[, 6376] <- rep("hungry", 382)
discomfortcry <- read.delim("discomfort_features_osm_affect.csv", sep=";", header = TRUE)
discomfortcry[, 6376] <- rep("discomfort", 27)
burpingcry <- read.delim("burping_features_osm_affect.csv", sep=";", header = TRUE)
burpingcry[, 6376] <- rep("burp", 8)
allcries <- rbind(bellypaincry[-17,], burpingcry, discomfortcry, hungrycry, tiredcry)
colnames(allcries)[6376] <- "class"
df
df %>% filter(Label == "Cry")
df <- df %>% filter(Label == "Cry")
allcries[df$Label=="Cry", ]
nojunkcries <- allcries[df$Label=="Cry", ]
nojunkcries <- nojunkcries %>% select(colnames(nojunkcries)[6376], colnames(nojunkcries)[1:6375])
rownames(nojunkcries) <- NULL
colnames(nojunkcries)[1] <- "class"
library(psych)    # For EFA and parallel analysis
predictors <- nojunkcries[, setdiff(names(nojunkcries), "class")]
efa_result <- fa(r = cor(predictors), nfactors = 2, rotate = "varimax")
nojunkcries
predictors <- nojunkcries[, setdiff(names(nojunkcries), "Label")]
library(tidyverse)
df <- read_csv("JunkDetector.csv")
tiredcry <- read.delim("tired_features_osm_affect.csv", sep=";", header = TRUE)
tiredcry[, 6376] <- rep("tired", 24)
bellypaincry <- read.delim("belly_pain_features_osm_affect.csv", sep=";", header = TRUE)
bellypaincry[, 6376] <- rep("pain", 17)
hungrycry <- read.delim("hungry_features_osm_affect.csv", sep=";", header = TRUE)
hungrycry[, 6376] <- rep("hungry", 382)
discomfortcry <- read.delim("discomfort_features_osm_affect.csv", sep=";", header = TRUE)
discomfortcry[, 6376] <- rep("discomfort", 27)
burpingcry <- read.delim("burping_features_osm_affect.csv", sep=";", header = TRUE)
burpingcry[, 6376] <- rep("burp", 8)
allcries <- rbind(bellypaincry[-17,], burpingcry, discomfortcry, hungrycry, tiredcry)
colnames(allcries)[6376] <- "Label"
df <- df %>% filter(Label == "Cry")
nojunkcries <- allcries[df$Label=="Cry", ]
nojunkcries <- nojunkcries %>% select(colnames(nojunkcries)[6376], colnames(nojunkcries)[1:6375])
rownames(nojunkcries) <- NULL
colnames(nojunkcries)[1] <- "class"
library(psych)    # For EFA and parallel analysis
predictors <- nojunkcries[, setdiff(names(nojunkcries), "Label")]
efa_result <- fa(r = cor(predictors), nfactors = 2, rotate = "varimax")
write.csv(nojunkcries, "New_Collated_Data.csv")
library(tidyverse)
df <- read_csv("New_Collated_Data.csv")
table(df$class)
usethis::edit_r_environ()
`usethis::edit_r_environ() `
`usethis::edit_r_environ()`
usethis::edit_r_environ()
install.packages("usethis")
usethis::edit_r_environ()
